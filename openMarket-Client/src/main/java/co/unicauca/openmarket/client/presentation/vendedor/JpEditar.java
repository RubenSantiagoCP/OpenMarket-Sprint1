package co.unicauca.openmarket.client.presentation.vendedor;

import co.unicauca.openmaket.client.command.AddProductCommand;
import co.unicauca.openmaket.client.command.Invoker;
import co.unicauca.openmarket.client.domain.service.CategoryService;
import co.unicauca.openmarket.client.domain.service.ProductService;
import co.unicauca.openmarket.client.infra.Messages;
import co.unicauca.openmarket.commons.domain.Category;
import co.unicauca.openmarket.commons.domain.Product;
import co.unicauca.openmarket.commons.domain.User;
import co.unicauca.openmarket.commons.observer.Observer;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jsarabino
 */
public class JpEditar extends javax.swing.JPanel implements Observer {
    
    private javax.swing.JPanel jpContent;
    private javax.swing.JPanel jpPrincipal;
    private ProductService productService;
    private CategoryService categoryService;
    private Invoker invoker;
    private User vendedor;
    
    /**
     * Creates new form JpEditar
     */
    public JpEditar(javax.swing.JPanel jpContent, javax.swing.JPanel jpPrincipal, ProductService productService, CategoryService categoryService, Invoker invoker, User vendedor) {
        initComponents();  
        initializeTable();
        this.productService = productService;
        this.categoryService = categoryService;
        this.invoker = new Invoker();
        this.invoker.registerObserver(this);
        this.jpPrincipal = jpPrincipal;
        this.jpContent = jpContent;
        this.vendedor = vendedor;
        update();
        
    }
    
    /**
     * Inicializa la tabla de editar producto.
     */
    private void initializeTable() {
        // Crea un nuevo modelo de tabla con datos vacíos y encabezados de columna
        tblEditar.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Name", "Description", "Precio", "Categoria"
                }
        ));
    }
    
    /**
     * Rellena la tabla con los datos de los productos.
     * Inicializa la tabla y luego recorre la lista de productos para agregar filas a la tabla.
     * Cada fila contiene el id, nombre, descripción, precio y categoría del producto.
     * Si hay algún problema al obtener la categoría de un producto, se lanza una excepción.
     * 
     * @param listProducts La lista de productos para mostrar en la tabla.
     * @throws Exception Si hay algún problema al obtener la categoría de un producto.
     */
    private void fillTable(List<Product> listProducts) throws Exception {
        initializeTable();
        DefaultTableModel model = (DefaultTableModel) tblEditar.getModel();
        Object rowData[] = new Object[5];//No columnas
        for (int i = 0; i < listProducts.size(); i++) {
            rowData[0] = listProducts.get(i).getProductId();
            rowData[1] = listProducts.get(i).getName();
            rowData[2] = listProducts.get(i).getDescription();
            Long catId = listProducts.get(i).getCategoryId();
            String catName = categoryService.findCategoryById(catId).getName();
            rowData[3] = listProducts.get(i).getPrice();
            rowData[4] = catName;

            model.addRow(rowData);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbNombreProducto = new javax.swing.JLabel();
        lbPrecio = new javax.swing.JLabel();
        lbIdCategoria = new javax.swing.JLabel();
        lbDescripcion = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        txtNombreProducto = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtIdCategoria = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtADescripcion = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEditar = new javax.swing.JTable();
        lbIdProducto = new javax.swing.JLabel();
        txtIdProducto = new javax.swing.JTextField();

        setBackground(new java.awt.Color(61, 64, 91));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbNombreProducto.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lbNombreProducto.setForeground(new java.awt.Color(255, 255, 255));
        lbNombreProducto.setText("Nombre");
        add(lbNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        lbPrecio.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lbPrecio.setForeground(new java.awt.Color(255, 255, 255));
        lbPrecio.setText("Precio");
        add(lbPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        lbIdCategoria.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lbIdCategoria.setForeground(new java.awt.Color(255, 255, 255));
        lbIdCategoria.setText("Id categoria");
        add(lbIdCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, -1, -1));

        lbDescripcion.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lbDescripcion.setForeground(new java.awt.Color(255, 255, 255));
        lbDescripcion.setText("Descripción");
        add(lbDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, -1, -1));

        btnGuardar.setBackground(new java.awt.Color(224, 122, 95));
        btnGuardar.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 120, 100, -1));

        btnVolver.setBackground(new java.awt.Color(224, 122, 95));
        btnVolver.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 180, 100, -1));
        add(txtNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 220, -1));
        add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 220, -1));
        add(txtIdCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 220, -1));

        txtADescripcion.setColumns(20);
        txtADescripcion.setRows(5);
        jScrollPane1.setViewportView(txtADescripcion);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 240, -1, 80));

        tblEditar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblEditar);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 330, 535, 245));

        lbIdProducto.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        lbIdProducto.setForeground(new java.awt.Color(255, 255, 255));
        lbIdProducto.setText("Id producto");
        add(lbIdProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));
        add(txtIdProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 220, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción realizada al presionar el botón "Volver".
     * Restaura el tamaño y la posición del panel principal (jpPrincipal) en el contenedor (jpContent).
     * Remueve todos los componentes del contenedor y agrega el panel principal.
     * Se realiza una revalidación y repintado del contenedor para reflejar los cambios.
     * 
     * @param evt El evento de acción generado al presionar el botón "Volver".
     */
    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        
        jpPrincipal.setSize(700, 600);
        jpPrincipal.setLocation(0, 0);
        jpContent.removeAll();
        jpContent.add(jpPrincipal, new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpContent.revalidate();
        jpContent.repaint();
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * Acción realizada al presionar el botón "Guardar".
     * Valida y guarda los cambios realizados en el producto.
     * Si falta ingresar el id del producto, se muestra un mensaje de advertencia.
     * Luego, llama al método editProduct() para realizar la edición del producto.
     * En caso de cualquier excepción, se muestra un mensaje de error.
     * 
     * @param evt El evento de acción generado al presionar el botón "Guardar".
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            txtIdProducto.requestFocus();
            if (txtIdProducto.getText().trim().equals("")) {
                Messages.showMessageDialog("Debe ingresar el id del producto", "Atención");
                txtIdProducto.requestFocus();
                return;
            }
            //Editar
            editProduct();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbDescripcion;
    private javax.swing.JLabel lbIdCategoria;
    private javax.swing.JLabel lbIdProducto;
    private javax.swing.JLabel lbNombreProducto;
    private javax.swing.JLabel lbPrecio;
    private javax.swing.JTable tblEditar;
    private javax.swing.JTextArea txtADescripcion;
    private javax.swing.JTextField txtIdCategoria;
    private javax.swing.JTextField txtIdProducto;
    private javax.swing.JTextField txtNombreProducto;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

    /**
     * Edita un producto existente.
     * Obtiene el id del producto del campo de texto txtIdProducto.
     * Encuentra el producto correspondiente al id.
     * Verifica si el usuario tiene permiso para editar el producto.
     * Si los campos de nombre, descripción, precio o categoría tienen valores no vacíos,
     * se actualizan los respectivos atributos del producto.
     * Se realiza la edición del producto utilizando el método editProduct() del productService.
     * Si la edición es exitosa, se muestra un mensaje de éxito, se limpian los controles y se actualiza la tabla.
     * En caso contrario, se muestra un mensaje de error.
     * Si el usuario no tiene permiso para editar el producto, se muestra un mensaje de error.
     *
     * @throws Exception Si ocurre algún error durante el proceso de edición del producto.
     */
    private void editProduct() throws Exception {
        //Obtener dato del id
        Long productId = Long.valueOf(txtIdProducto.getText().trim());
        
        //Encontrar el producto por id
        Product prod = productService.findProductById(productId);
        
        if (isProductVendedor(prod)) {
            if (!txtNombreProducto.getText().isEmpty()) {
                prod.setName(txtNombreProducto.getText().trim());
            }
            if (!txtADescripcion.getText().isEmpty()) {
                prod.setDescription(txtADescripcion.getText().trim());
            }
            if (!txtPrecio.getText().isEmpty()) {
                prod.setPrice(Double.parseDouble(txtPrecio.getText().trim()));
            }
            if (!txtIdCategoria.getText().isEmpty()) {

                Category cat = categoryService.findCategoryById(Long.valueOf(txtIdCategoria.getText()));
                if (cat == null) {
                    JOptionPane.showMessageDialog(null,
                            "La categoria no existe, ingrese una valida",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                prod.setCategoryId(cat.getCategoryId());

            }

            if (productService.editProduct(productId, prod)) {
                Messages.showMessageDialog("Se editó con éxito", "Atención");
                cleanControls();
                update();
            } else {
                Messages.showMessageDialog("Error al editar, lo siento mucho", "Atención");
            }
        }else {
        
            JOptionPane.showMessageDialog(null,
            "No tienes permiso para editar este producto.",
            "Errro product id",
            JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Obtiene una lista de productos pertenecientes al vendedor actual.
     * Recibe una lista de productos y filtra aquellos que tienen el mismo vendedorId que el vendedor actual.
     *
     * @param products La lista de productos a filtrar.
     * @return Una lista de productos pertenecientes al vendedor actual.
     */
    private List<Product> getProductsVendedor(List<Product> products){
        List<Product> productsVendedor = new ArrayList<>(); 
        
        for(int i = 0; i < products.size();i++){
            if (products.get(i).getVendedorId() == vendedor.getId()) {
                productsVendedor.add(products.get(i));
            }
        }
        return productsVendedor;
    }
    
    /**
     * Valida si un producto pertenece al vendedor actual.
     * Compara el vendedorId del producto con el id del vendedor actual para determinar si es un producto del vendedor.
     *
     * @param productVendedor El producto a validar.
     * @return true si el producto pertenece al vendedor actual, false en caso contrario.
     */
    private boolean isProductVendedor(Product productVendedor) {
        boolean bandera = false;
        if (productVendedor.getVendedorId() == vendedor.getId()) {
            bandera = true;
        }
        return bandera;
    }
    
    /**
     * Limpia los controles de la interfaz de usuario relacionados con la información del producto.
     * Establece el texto de los campos txtIdProducto, txtNombreProducto, txtADescripcion, txtIdCategoria y txtPrecio como una cadena vacía.
     */
    private void cleanControls() {
        txtIdProducto.setText("");
        txtNombreProducto.setText("");
        txtADescripcion.setText("");
        txtIdCategoria.setText("");
        txtPrecio.setText("");
    }
    
    /**
     * Actualiza la tabla de productos con los datos más recientes.
     * Obtiene todos los productos, filtra los productos del vendedor actual y llena la tabla con los productos resultantes.
     * Si ocurre alguna excepción durante el proceso, se registra en el registro de errores.
     */
    @Override
    public void update() {
        try {
            //Encontrar todos los productos
            List<Product> products = new ArrayList<>();
            products = productService.findAllProducts();
            
            //Filtrar los productos del vendedor
            List<Product> productsVendedor = new ArrayList<>();
            productsVendedor = getProductsVendedor(products);
            
            // Llenar la tabla con los productos del vendedor
            fillTable(productsVendedor);
        } catch (Exception ex) {
            Logger.getLogger(JpEditar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
